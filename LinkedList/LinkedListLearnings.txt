==================================================================================================================
Find Middle Node
==================================================================================================================
Implement a method called findMiddleNode that returns the middle node of the linked list.
If the list has an even number of nodes, the method should return the second middle node.
Note: this LinkedList implementation does not have a length member variable.

If linked list has odd number of nodes, like 1 -> 2 -> 3 -> 4 -> 5,  it will return the node containing the value 3.
If the linked list is 1 -> 2 -> 3 -> 4 -> 5 -> 6, the two middle nodes are 3 and 4. The function will return the node containing the value 4.

Note:
In this problem, you should use the slow and fast pointer technique 
(also known as Floyd's Tortoise and Hare algorithm) to find the middle element of the linked list efficiently.

The key idea is to have two pointers, one that moves twice as fast as the other. 
By the time the fast pointer reaches the end of the linked list, the slow pointer will be at the middle.

Solution:

    public Node findMiddleNode() {
        if (this.head == null) return null;

        Node slowCur = this.head;
        Node fastCur = this.head;

        while (fastCur.next != null) {
            slowCur = slowCur.next;
            if (fastCur.next.next == null) break; // guard clause for even no., causing NPE
            fastCur = fastCur.next.next;
        }
        return slowCur;
    }

==================================================================================================================
LL Has Loop
==================================================================================================================
- Write a method called hasLoop that is part of the linked list class.
- The method should be able to detect if there is a cycle or loop present in the linked list.

You are required to use Floyd's cycle-finding algorithm (also known as the "tortoise and the hare" algorithm) to detect the loop.

This algorithm uses two pointers: a slow pointer and a fast pointer. 
The slow pointer moves one step at a time, while the fast pointer moves two steps at a time. 
If there is a loop in the linked list, the two pointers will eventually meet at some point. 
If there is no loop, the fast pointer will reach the end of the list.

Solution:

    public boolean hasLoop() {
        if (this.head == null || this.head.next == null) return false; // empty LL or LL with single element guard clause

        Node slowCur = this.head;
        Node fastCur = this.head;

        while (fastCur != null) {
            if (fastCur.next.next == null) return false; // guard clause for NPE

            fastCur = fastCur.next.next;
            slowCur = slowCur.next;

            if (fastCur == slowCur) return true; // Loop causes eventual meeting
        }
        return false;
    }

==================================================================================================================
Find Kth Node from End
==================================================================================================================

Implement a method called findKthFromEnd that returns the k-th node from the end of the list.
If the list has fewer than k nodes, the method should return null.

Note: This implementation of the Linked List class does not have the length attribute.
Method signature: public Node findKthFromEnd(int k)

The algorithm uses two pointers, called 'slow' and 'fast'. Both of these pointers start at the head of the list (the beginning of the chain).
First, 'fast' is moved 'k' steps along the list.
 If 'fast' encounters the end of the list (represented by 'null') before 'k' steps, function returns 'null' because the list is shorter than 'k'

Now, both 'slow' and 'fast' start moving along the list at the same pace, one step at a time.
By the time 'fast' hits the end of the list, 'slow' will be 'k' steps behind it (i.e k away from end of list)

This is a common technique in computer science known as the 'fast-pointer / slow-pointer' or 'runner' technique,
A neat way of finding a position relative to the end of a list in a single pass.

Solution:

    public Node findKthFromEnd(int k) {
        if (this.head == null) return null;

        Node fastCur = this.head;
        Node slowCur = this.head;

        for (int i = 0; i < k; i++) {
            if (fastCur == null) return null; // guard clause for k > length of LL
            fastCur = fastCur.next;
        }

        while (fastCur != null) {
            slowCur = slowCur.next;
            fastCur = fastCur.next;
        }

        return slowCur;
    } 

==================================================================================================================
Partition List
==================================================================================================================
You have a singly linked list that DOES NOT HAVE A TAIL POINTER 
Given a value x you need to rearrange the linked list such that all nodes with a value less than x come before all nodes with a value greater than or equal to x.
Additionally, the relative order of nodes in both partitions should remain unchanged.

Constraints:
The solution should traverse the linked list at most once.
The solution should not create a new linked list.

Function signature:
public void partitionList(int x);

This algorithm uses two dummy nodes and two pointers to maintain two separate partitions of the original list,
One containing nodes with values less than x, and the other containing nodes with values greater than or equal to x.
It then concatenates the two partitions and updates the head of the list accordingly.

3 -> 8 -> 5 -> 10 -> 2 -> 1, x = 5
Output: 3 -> 2 -> 1 -> 8 -> 5 -> 10

Solution:
    public void partitionList(int x) {
        Node lowerChain = new Node(0);
        Node upperChain = new Node(0);

        Node lowerChainCur = lowerChain;
        Node upperChainCur = upperChain;
        Node cur = this.head;

        while(cur != null) {
            if (cur.value < x) {
                lowerChainCur.next = cur;
                lowerChainCur = cur;
            } else {
                upperChainCur.next = cur;
                upperChainCur = cur;
            }
            cur = cur.next;
        }

        // Draw out to visualize how to attain this code
        upperChainCur.next = null;
        lowerChainCur.next = upperChain.next;
        this.head = lowerChain.next;
    }
==================================================================================================================
Remove Duplicates
==================================================================================================================
You are given a singly linked list that contains integer values, where some of these values may be duplicated.
Note: this linked list class does NOT have a tail which will make this method easier to implement.
Your task is to implement a method called removeDuplicates() within the LinkedList class that removes all duplicate values from the list.
Your method should not create a new list, but rather modify the existing list in-place, preserving the relative order of the nodes.

Using a Set (HashSet) - This approach will have a time complexity of O(n), where n is the number of nodes in the linked list.
 You are allowed to use the provided Set data structure in your implementation.

The method signature you need to implement: public void removeDuplicates() {}


* use prevCur & Cur, using prevCur to skip if values already exist in HashSet
Solution:
    public void removeDuplicates() {

        Set<Integer> uniqueValues = new HashSet<>();
        Node prev = null;
        Node cur = this.head;

        while (cur != null) {
            if (uniqueValues.contains(cur.value)) {
                prev.next = cur.next; // skip cur node since duplicate (gist of manipulating LL in-line)
            } else {
                uniqueValues.add(cur.value);
                prev = cur;
            }
            cur = cur.next;
        }
    }

    This algorithm uses a HashSet to keep track of unique values in the linked list and removes duplicates by updating the next pointers of the nodes as needed.